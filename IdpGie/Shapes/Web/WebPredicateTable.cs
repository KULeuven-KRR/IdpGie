//
//  WebPredicateTable.cs
//
//  Author:
//       Willem Van Onsem <Willem.VanOnsem@cs.kuleuven.be>
//
//  Copyright (c) 2014 Willem Van Onsem
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with this program.  If not, see <http://www.gnu.org/licenses/>.
using System.Web.UI;
using System.Linq;
using System.Collections.Generic;
using System.Xml.Serialization;
using IdpGie.Shapes.Pages;
using IdpGie.Engines;
using IdpGie.Utils;

//TODO: interface
using System;

namespace IdpGie.Shapes.Web {
	/// <summary>
	/// A webshape that displays a table that contains the values of the predicates.
	/// </summary>
	[XmlRoot("predicatetable")]
	[WebShape("predicatetable")]
	public class WebPredicateTable : QueryWebPageShapeBase {
		/// <summary>
		/// Gets or sets the query that should be resolved using the interactive lua shell.
		/// </summary>
		/// <value>The query to resolve by the interactive lua shell.</value>
		[XmlAttribute("query")]
		public string Query {
			get;
			set;
		}

		/// <summary>
		/// Gets the source of the data to be rendered.
		/// </summary>
		/// <value>The source of the data to be rendered.</value>
		public IEnumerable<IEnumerable<object>> Source {
			get {
				if (DateTime.Now.Ticks % 1000 < 500) {
					return new object[][] {
						new object[] {"Het beste thesisonderwerp ooit","Bart Demoen",2},
						new object[] {"Documenteren van de Lua interface in IDP","Marc Denecker",1},
						new object[] {"Documenteren van de rest van IDP","Marc Denecker",1}
					};
				} else {
					return new object[][] {
						new object[] {"Foo versus Bar, what is the best FooBar instance?","Ricardo Scandriato",2},
						new object[] {"Arthur and Merlin, who met Dumbledore?","Harry Potter",1},
						new object[] {"Het visualiseren van visualisatie","Erik Duval",1}
					};
				}//TODO: real binding
			}
		}

		/// <summary>
		/// Gets or sets the columns of the resulting table.
		/// </summary>
		/// <value>The columns of the resulting table.</value>
		[XmlArray("columns")]
		[XmlArrayItem("column")]
		public List<WebPredicateTableColumn> Columns {
			get;
			set;
		}

		/// <summary>
		/// Determines whether a user can check the table rows. In that case the rows each have a unique identifier
		/// and the table contains a special column for checkboxes).
		/// </summary>
		/// <value><c>true</c> if the user can check rows; otherwise, <c>false</c>.</value>
		[XmlAttribute("check")]
		public bool CanCheck {
			get;
			set;
		}

		/// <summary>
		/// Gets or sets a value indicating whether the user can refresh the table.
		/// </summary>
		/// <value><c>true</c> if the user can refresh the table; otherwise, <c>false</c>.</value>
		[XmlAttribute("refresh")]
		public bool CanRefresh {
			get;
			set;
		}
		#region Constructor
		/// <summary>
		/// Initializes a new instance of the <see cref="IdpGie.Shapes.Web.WebPredicateTable"/> class.
		/// </summary>
		/// <remarks>
		/// <para>The default constructor is inteded for XML deserialization as well.</para>
		/// </remarks>
		public WebPredicateTable () {
		}
		#endregion
		#region IWebShape implementation
		/// <summary>
		/// Gets a page piece that performs the bridge between the webpage and the <see cref="IQueryWebPage"/>\
		/// generated by the <see cref="IWebShape"/> instance.
		/// </summary>
		/// <returns>A page piece to inject in the generated page to bind with the generated <see cref="IQueryWebPage"/>.</returns>
		public override IWebPagePiece GetPagePiece () {
			return new QueryLandingWebPagePiece (this);
		}
		#endregion
		#region IWebPagePiece implementation
		/// <summary>
		/// Render the webpage onto the give specified engine.
		/// </summary>
		/// <param name="serverFolder">The root of the folder of the web server.</param>
		/// <param name="engine">The given specified engine.</param>
		/// <param name="writer">The html writer to write content to.</param>
		public override void Render (string serverFolder, HttpEngine engine, Html32TextWriter writer) {
			writer.AddAttribute (HtmlTextWriterAttribute.Class, "table table-hover table-condensed table-bordered");
			writer.RenderBeginTag (HtmlTextWriterTag.Table);
			{
				writer.RenderBeginTag (HtmlTextWriterTag.Thead);
				{
					writer.RenderBeginTag (HtmlTextWriterTag.Tr);
					{
						foreach (WebPredicateTableColumn column in this.Columns) {
							writer.RenderBeginTag (HtmlTextWriterTag.Th);
							writer.Write (column.Name);
							writer.RenderEndTag ();
						}
						writer.RenderBeginTag (HtmlTextWriterTag.Th);
						writer.AddAttribute (HtmlTextWriterAttribute.Class, "btn-group");
						writer.RenderBeginTag (HtmlTextWriterTag.Div);
						{
							writer.AddAttribute (HtmlTextWriterAttribute.Onclick, string.Format ("genericAjax (\"{0}\", \"landing{1}\");", this.Href, this.Id));
							writer.AddAttribute (HtmlTextWriterAttribute.Class, "btn btn-info btn-xs");
							writer.RenderBeginTag (HtmlTextWriterTag.Button);
							writer.WriteLine ("<i class=\"glyphicon glyphicon-refresh\"></i>");
							writer.RenderEndTag ();
							writer.AddAttribute (HtmlTextWriterAttribute.Class, "btn btn-success btn-xs");
							writer.RenderBeginTag (HtmlTextWriterTag.Button);
							writer.WriteLine ("<i class=\"glyphicon glyphicon-plus\"></i>");
							writer.RenderEndTag ();
						}
						writer.RenderEndTag ();
						writer.RenderEndTag ();
					}
					writer.RenderEndTag ();
				}
				writer.RenderEndTag ();
				writer.RenderBeginTag (HtmlTextWriterTag.Tbody);
				{
					IEnumerable<int> indices = this.Columns.Select (x => x.Index).ToArray ();
					foreach (IEnumerable<object> row in this.Source) {
						writer.WriteLine ();
						writer.RenderBeginTag (HtmlTextWriterTag.Tr);
						foreach (object item in row.IndicesOrdered (indices)) {
							writer.RenderBeginTag (HtmlTextWriterTag.Td);
							writer.Write (item);
							writer.RenderEndTag ();
						}
						writer.RenderBeginTag (HtmlTextWriterTag.Td);
						writer.AddAttribute (HtmlTextWriterAttribute.Class, "btn-group");
						writer.RenderBeginTag (HtmlTextWriterTag.Div);
						{
							writer.AddAttribute (HtmlTextWriterAttribute.Onclick, string.Format ("genericAjax (\"{0}\", \"landing{1}\");", this.Href, this.Id));
							writer.AddAttribute (HtmlTextWriterAttribute.Class, "btn btn-warning btn-xs");
							writer.RenderBeginTag (HtmlTextWriterTag.Button);
							writer.WriteLine ("<i class=\"glyphicon glyphicon-edit\"></i>");
							writer.RenderEndTag ();
							writer.AddAttribute (HtmlTextWriterAttribute.Class, "btn btn-danger btn-xs");
							writer.RenderBeginTag (HtmlTextWriterTag.Button);
							writer.WriteLine ("<i class=\"glyphicon glyphicon-remove\"></i>");
							writer.RenderEndTag ();
						}
						writer.RenderEndTag ();
						writer.RenderEndTag ();
						writer.RenderEndTag ();
					}
				}
				writer.RenderEndTag ();
			}
			writer.RenderEndTag ();
		}
		#endregion
	}
}

