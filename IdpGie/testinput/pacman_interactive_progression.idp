include <mx>


vocabulary V {
	type xCoord isa int
	type yCoord isa int
	nopos(xCoord, yCoord)
	type dir
	l:dir
	r:dir
	d:dir
	u:dir
	oppdir(dir):dir
	wall(xCoord, yCoord, dir)
	tunnel(xCoord, yCoord, xCoord, yCoord)
	type Time isa int
	Next(Time):Time
	Start:Time
	
	square(xCoord, yCoord)
	initplayer(xCoord, yCoord)
	initgold(xCoord, yCoord)
	walls(xCoord, yCoord, dir)
	
	gold(Time, xCoord, yCoord)
	partial move(Time): dir
	nomove(Time)
	player(Time,xCoord,yCoord)
		
	partial nextx(xCoord, dir): xCoord
	partial nexty(yCoord, dir): yCoord
	
	type maxscore isa int
	score(Time):maxscore
	
	teleport(xCoord,yCoord)
}
theory T:V{
	#{x y: player(t,x,y)}=1.
	{
		nexty(p, d) = p.
		nexty(p, u) = p.
		nextx(p, l) = p.
		nextx(p, r) = p.
		nexty(p, r) = p+1 <- yCoord(p+1).
		nexty(p, l) = p-1 <- yCoord(p-1).
		nextx(p, u) = p-1 <- xCoord(p-1).
		nextx(p, d) = p+1 <- xCoord(p+1).
		oppdir(u)=d.
		oppdir(d)=u.
		oppdir(l)=r.
		oppdir(r)=l.
	}
	{
		square(x, y) <- ~nopos(x, y).
		!d: walls(x, y, d) <- square(x, y) & ~square(nextx(x, d), nexty(y, d)).
		!d: walls(x, y, d) <- ~square(x, y) & square(nextx(x, d), nexty(y, d)).
		!d: walls(x, y, d) <- square(x, y) & square(nextx(x, d), nexty(y, d)) & (wall(x, y, d) | wall(nextx(x, d), nexty(y, d), oppdir(d))).
	}
	
	{
		gold(Start,x,y)   <- initgold(x, y).
		gold(Next(t),x,y) <- gold(t,x,y) & ~player(t,x,y).
	}
	
	{
		nomove(t) <- !d: move(t)~=d.
	}
	
	initplayer(x,y) => player(Start,x,y).
	nomove(t) & player(t,x,y) => player(Next(t),x,y). 
	!d t[Time] x' x y y': (move(t)=d & nextx(x,d) = x' & player(t,x,y) & ~teleport(x', nexty(y,d)) & y'=nexty(y,d)=> player(Next(t),x',y')).
	!d: move(t)=d & player(t,x,y) & (tunnel(nextx(x,d),nexty(y,d),x2,y2) | tunnel(x2,y2,nextx(x,d),nexty(y,d))) => player(Next(t),x2,y2).
	
	nomove(t)  => nomove(Next(t)).
	!d: move(t)=d & player(t,x,y) => (?x2: nextx(x,d)=x2) & (?y2: nexty(y,d)=y2).
	
	{
		teleport(x,y) <- tunnel(x,y,x',y').
		teleport(x,y) <- tunnel(x',y',x,y).
	}
	
	player(t,x,y) => ~walls(x,y,move(t)).
	
	player(t,x,y) => square(x,y).
	
	{
		initgold(x, y) <- square(x, y) & ~teleport(x,y).
	}
	
	//!x y: initgold(x,y) => ?t: player(t,x,y).
		
	score(t)=#{x y: initgold(x, y)}-#{x y: gold(t, x, y)}.
}
	
structure S1 : V{
	l=l
	r=r
	u=u
	d=d
	xCoord = {0..6}
	yCoord = {0..11}
	nopos = {0,0;0,1;0,3;0,4;0,5;0,6;0,7;0,8;0,9;0,10;0,11;
			1,0;2,0;4,0;5,0;1,11;2,11;4,11;5,11;
			6,0;6,1;6,2;6,3;6,4;6,5;6,6;6,7;6,8;6,10;6,11;}
	wall = { 2,2,l; 2,2,u; 2,3,u; 2,4,u; 2,4,d; 2,5,d; 1,5,r; 2,7,u; 2,8,u; 2,9,r;
			3,2,r; 3,2,l; 3,6,d; 3,6,u; 3,9,r; 3,7,d; 3,7,u; 3,8,u; 3,8,r; 
			4,2,l; 4,2,d; 4,3,u; 4,3,d; 4,4,u; 4,4,d; 4,5,u; 5,5,r; 4,7,d; 4,8,d; 4,9,r; //4,9,d;
	}
	
	Time = {0..75}
	maxscore = {0..100}
	
	tunnel = {3,0,3,11;0,2,6,9;}
	
	initplayer = {1,1}
}

procedure valueofmove(input){
	if input[iv::move]() == S1[V::d]() then return "d"	end
	if input[iv::move]() == S1[V::r]() then return "r"	end
	if input[iv::move]() == S1[V::u]() then return "u" end
	if input[iv::move]() == S1[V::l]() then return "l"	end
}

procedure draw(struc){
	stdoptions.language="asp"
	file = io.open("iModel.txt","w")
	file:write(tostring(struc))
	file:close()
	if f~=nil then close(f) end
	f1 = io.popen("./rundraw.sh")
}


procedure message(m,lang){
	messages={
		{"code","en","nl"},
		{"welcome","Welcome to the PacMan simulator","Welkom bij de PacMan simulator"},
		{"next","Next step, choose an option please, here are the possible values","Volgende stap, kies een optie aub. Hier zijn de mogelijke waarden"},
		{"command","Command:","Commando:"},
		{"value","Value","Waarde"},
		{"stop","Stop","Stop"},
		{"l","Left","Links"},
		{"r","Right","Rechts"},
		{"u","Up","Boven"},
		{"d","Down","Onder"},
		{"where","Where do you want to go?","Waarheen wil je gaan?"},
		{"invalid","Invalid value, please try again.","Ongeldige waarde, probeer aub opnieuw."}
	}
	local langs=messages[1]
	local num = 0
	for i = 2,#langs do
		if langs[i] == lang then
			num = i
			break
		end
	end
	if num == 0 then
		print("Unsupported language",lang)
	end
	for i = 2,#messages do
		if m == messages[i][1] then
			return messages[i][num]
		end
	end
	print("Unknown message",m)
}

procedure goleft(possStrucs){
	return go(possStrucs,"l")
}
procedure goright(possStrucs){
	return go(possStrucs,"r")
}
procedure goup(possStrucs){
	return go(possStrucs,"u")
}
procedure godown(possStrucs){
	return go(possStrucs,"d")
}
procedure go(possStrucs,move){
	result=-1;
	for i=1,#possStrucs do
		if valueofmove(possStrucs[i])==move then result=i end
	end
	selstruc = possStrucs[result];
	return progress(T,selstruc)
}

procedure main(){
--	require "curses"
	l="nl"
	stdoptions.xsb=false
	stdoptions.groundwithbounds=false
	stdoptions.liftedunitpropagation=false
	stdoptions.nbmodels=0

	curStructure = calculatedefinitions(T,S1) // when using the tool, set this to <made>
		
	possStrucs,a,b,initVoc =initialise(T,curStructure)
	print(message("welcome",l))
	struc = possStrucs[1]
	while true do
		draw(struc)
		print(message("next",l))
		print(message("command",l),message("value",l))
		print("0"," ",message("stop",l))
		left=-1; right=-1; up=-1; down=-1;
		for i=1,#possStrucs do
			if valueofmove(possStrucs[i])=="l" then left=i end	
			if valueofmove(possStrucs[i])=="d" then down=i end
			if valueofmove(possStrucs[i])=="r" then right=i end
			if valueofmove(possStrucs[i])=="u" then up=i end
		end
		if left~=-1 then print("1", "", message("l",l)) end
		if down~=-1 then print("2", "", message("d",l)) end
		if right~=-1 then print("3", "", message("r",l)) end
		if up~=-1 then print("5", "", message("u",l)) end
		print(message("where",l))

		selstruc = nil;
		while true do
			inp = tonumber(io.read("*line"))
			if inp==0 then break end
			if inp==1 and left~=-1 then selstruc=possStrucs[left]; break end
			if inp==2 and down~=-1 then selstruc=possStrucs[down]; break end
			if inp==3 and right~=-1 then selstruc=possStrucs[right]; break end
			if inp==5 and up~=-1 then selstruc=possStrucs[up]; break end
			print(message("invalid",l))
		end
		if inp == 0 then
			break
		end

		possStrucs=progress(T,selstruc)
		struc = possStrucs[1] 
	end
	io.popen("killall -9 IDPDraw -q")
}

