//
//  WebShape.cs
//
//  Author:
//       Willem Van Onsem <Willem.VanOnsem@cs.kuleuven.be>
//
//  Copyright (c) 2014 Willem Van Onsem
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with this program.  If not, see <http://www.gnu.org/licenses/>.
using IdpGie.Shapes.Pages;
using System.Reflection;
using System;
using System.Linq;
using System.Xml.Serialization;
using System.Collections.Generic;
using System.Xml;
using HtmlAgilityPack;

namespace IdpGie.Shapes.Web {
	/// <summary>
	/// A basic abstract implementation of a web shape.
	/// </summary>
	public abstract class WebShapeBase : IWebShape {

		#region Static fields
		private static readonly Dictionary<string,XmlSerializer> xmlSerializers = new Dictionary<string, XmlSerializer> ();
		#endregion
		/// <summary>
		/// Initializes a new instance of the <see cref="WebShape"/> class.
		/// </summary>
		protected WebShapeBase () {
		}
		#region IWebShape implementation
		/// <summary>
		/// Translates the given <see cref="IWebShape"/> into a relevant <see cref="IQueryWebPage"/> instance.
		/// </summary>
		/// <returns>
		/// An <see cref="IQueryWebPage"/> instances that can produce dynamic content.
		/// </returns>
		public abstract IQueryWebPage GetQueryPage ();

		/// <summary>
		/// Gets a page piece that performs the bridge between the webpage and the <see cref="IQueryWebPage"/>\
		/// generated by the <see cref="GetQueryPage()"/> method.
		/// </summary>
		/// <returns>A page piece to inject in the generated page to bind with the generated <see cref="IQueryWebPage"/>.</returns>
		public abstract IWebPagePiece GetPagePiece ();
		#endregion
		#region Static methods
		/// <summary>
		/// Decodes the given HTML tag into a corresponding the web shape.
		/// </summary>
		/// <returns>A webshape corresponding to the given HTML content.</returns>
		/// <param name="htmlNode">The given node to decode.</param>
		/// <remarks>
		/// <para>If the tagname cannot be found or the content cannot be deserialized, <c>null</c> is returned.</para>
		/// </remarks>
		public static IWebShape DecodeWebShape (HtmlNode htmlNode) {
			//htmlNode.
			return null;
		}

		/// <summary>
		/// Decodes the given XML content into a corresponding the web shape.
		/// </summary>
		/// <returns>A webshape corresponding to the given tag name and XML content.</returns>
		/// <param name="tag">The name of the tag to decode.</param>
		/// <param name="reader">The XML stream containing the information that should be stored in the webshape.</param>
		/// <remarks>
		/// <para>If the tagname cannot be found or the content cannot be deserialized, <c>null</c> is returned.</para>
		/// </remarks>
		public static IWebShape DecodeWebShape (string tag, XmlReader reader) {
			XmlSerializer ser;
			if (xmlSerializers.TryGetValue (tag, out ser)) {
				try {
					return (IWebShape)ser.Deserialize (reader);
				} catch (Exception e) {
					Console.Error.WriteLine (e);
					return null;
				}
			} else {
				return null;
			}
		}

		/// <summary>
		/// Analyzes the given assembly and adds stores the founded webshape tags. They are then used to translate
		/// specific inline tags into the corresponding webshapes.
		/// </summary>
		/// <param name="assembly">The assembly to analyze.</param>
		public static void AnalyzeAssembly (Assembly assembly) {
			foreach (Type t in assembly.GetTypes ()) {
				AnalyzeType (t);
			}
		}

		/// <summary>
		/// Analyzes the type and stores <see cref="IWebShape"/> types that support the <see cref="WebShapeAttribute"/>
		/// in a store to generate them from static <see cref="IWebPage"/> instances.
		/// </summary>
		/// <param name="type">The type to analyze.</param>
		public static void AnalyzeType (Type type) {
			if (!type.IsAbstract && type.IsClass && !type.IsGenericType && type.IsPublic && typeof(IWebShape).IsAssignableFrom (type)) {
				XmlSerializer ser = null;
				foreach (WebShapeAttribute att in type.GetCustomAttributes (typeof(WebShapeAttribute),false).Cast<WebShapeAttribute>()) {
					try {
						if (ser == null) {
							ser = new XmlSerializer (type);
						}
						xmlSerializers.Add (att.TagName, ser);
					} catch (Exception e) {
						Console.Error.WriteLine (e);
					}
				}
			}
		}
		#endregion
	}
}

